-- schema.sql
-- Схема для Railway Postgres. Все timestamp в UTC (по умолчанию в Railway).
-- Перезапускается безопасно: используются IF NOT EXISTS там, где возможно.

-- Рекомендуется фиксировать схему:
CREATE SCHEMA IF NOT EXISTS app;
SET search_path TO app, public;

-- USERS
CREATE TABLE IF NOT EXISTS app.users (
  id            INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  telegram_id   BIGINT UNIQUE,
  username      TEXT,
  timezone      TEXT, -- храним как IANA, например 'America/Sao_Paulo'
  is_paid       BOOLEAN NOT NULL DEFAULT FALSE,
  started_at    TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- QUESTIONS
CREATE TABLE IF NOT EXISTS app.questions (
  id         INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  level      INTEGER,  -- уровень по пирамиде Дилтса (можно добавить CHECK позже, если уровни фиксированы)
  question   TEXT NOT NULL
);

-- USER ANSWERS
CREATE TABLE IF NOT EXISTS app.user_answers (
  id           INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id      INTEGER NOT NULL REFERENCES app.users(id) ON DELETE CASCADE,
  question_id  INTEGER NOT NULL REFERENCES app.questions(id) ON DELETE CASCADE,
  answer       TEXT,
  created_at   TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- MEDITATIONS
-- Тип оставляю CHECK, как просил; если захочешь — можно заменить на ENUM.
CREATE TABLE IF NOT EXISTS app.meditations (
  id               INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id          INTEGER NOT NULL REFERENCES app.users(id) ON DELETE CASCADE,
  type             TEXT NOT NULL CHECK (type IN ('morning', 'evening')),
  gpt_prompt       TEXT,
  meditation_text  TEXT,
  suno_ready_text  TEXT,
  suno_track_url   TEXT,
  created_at       TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- TRACK PROGRESS
CREATE TABLE IF NOT EXISTS app.user_progress (
  id                      INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id                 INTEGER NOT NULL UNIQUE REFERENCES app.users(id) ON DELETE CASCADE,
  question_index          INTEGER NOT NULL DEFAULT 1, -- индекс следующего вопроса
  last_question_sent_at   TIMESTAMPTZ,
  last_meditation_sent_at TIMESTAMPTZ
);

-- Полезные индексы
CREATE INDEX IF NOT EXISTS idx_user_answers_user_id     ON app.user_answers(user_id);
CREATE INDEX IF NOT EXISTS idx_user_answers_question_id ON app.user_answers(question_id);
CREATE INDEX IF NOT EXISTS idx_meditations_user_id      ON app.meditations(user_id);
CREATE INDEX IF NOT EXISTS idx_meditations_type_created ON app.meditations(type, created_at DESC);

-- Защита от дубликатов ответов на один и тот же вопрос (по желанию):
-- CREATE UNIQUE INDEX IF NOT EXISTS uniq_answer_per_user_question
--   ON app.user_answers(user_id, question_id);

-- Быстрый sanity-check
-- SELECT 'ok' AS schema_loaded;
