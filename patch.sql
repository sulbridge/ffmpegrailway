-- patch.sql — доводим структуру под нужныe поля
SET search_path TO app, public;

-- USERS: колонки
ALTER TABLE app.users
  ADD COLUMN IF NOT EXISTS telegram_id BIGINT,
  ADD COLUMN IF NOT EXISTS username    TEXT,
  ADD COLUMN IF NOT EXISTS timezone    TEXT,
  ADD COLUMN IF NOT EXISTS is_paid     BOOLEAN NOT NULL DEFAULT FALSE,
  ADD COLUMN IF NOT EXISTS started_at  TIMESTAMPTZ NOT NULL DEFAULT NOW();

-- USERS: уникальность + индекс по telegram_id
CREATE UNIQUE INDEX IF NOT EXISTS users_telegram_id_key ON app.users(telegram_id);
CREATE INDEX        IF NOT EXISTS idx_users_telegram_id ON app.users(telegram_id);

-- USER_PROGRESS: создать если нет
CREATE TABLE IF NOT EXISTS app.user_progress (
  id                      INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id                 INTEGER,
  question_index          INTEGER NOT NULL DEFAULT 1,
  last_question_sent_at   TIMESTAMPTZ,
  last_meditation_sent_at TIMESTAMPTZ
);

-- USER_PROGRESS: дефолты (на случай старой схемы)
ALTER TABLE app.user_progress
  ALTER COLUMN question_index SET DEFAULT 1;

-- USER_PROGRESS: FK на users (пересоздадим безопасно)
ALTER TABLE app.user_progress DROP CONSTRAINT IF EXISTS user_progress_user_id_fkey;
ALTER TABLE app.user_progress
  ADD CONSTRAINT user_progress_user_id_fkey
  FOREIGN KEY (user_id) REFERENCES app.users(id) ON DELETE CASCADE;

-- USER_PROGRESS: по одному прогрессу на пользователя
ALTER TABLE app.user_progress DROP CONSTRAINT IF EXISTS user_progress_user_id_key;
ALTER TABLE app.user_progress ADD CONSTRAINT user_progress_user_id_key UNIQUE (user_id);

-- Индекс для запросов по user_id
CREATE INDEX IF NOT EXISTS idx_user_progress_user_id ON app.user_progress(user_id);
